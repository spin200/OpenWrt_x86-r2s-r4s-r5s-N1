#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on: 
  repository_dispatch:

env:
  REPO_TOKEN: ${{ secrets.TOKEN_KIDDIN9 }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  SCKEY: ${{ secrets.SCKEY }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DOCKER_ID: ${{ secrets.DOCKER_ID }}
  DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}
  UPLOAD_FIRMWARE_FOR_ARTIFACT: true
  UPLOAD_FIRMWARE_FOR_RELEASE: true
  # 编译者
  BUILD_USER: spin200
  # 分支
  BRANCH: Hiwifi_Hc5962-Lean
     # 临时文件名称
  DOWNLOAD_URL_FILE: Tmp-Link-Url.txt
     # 固件标签
  TARGET: ramips
   # 固件版本
  SUBTARGET: mt7621
   #微信通知
  SEND_WECHAT_MSG : true
   # 发行固件地址
  GITHUB_RELEASE: https://github.com/spin200/HC5962-OpenWrt/releases

  
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: Ubuntu-22.04
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: ["${{ github.event.client_payload.target }}"]
        
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
          fetch-depth: 0

    # - name: Set up secret file
      # run: |
        # echo ${{ secrets.TELEGRAM_CHAT_ID }} | sed 's/./& /g'
        # echo ${{ secrets.TELEGRAM_TOKEN }} | sed 's/./& /g'

    - name: 加载配置文件 Settings.ini
      run: |
        echo ${{matrix.target}}
        source "${GITHUB_WORKSPACE}/devices/common/settings.ini"
        if [ -f "devices/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/devices/${{matrix.target}}/settings.ini"
        fi
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV
        sed -i "1a REPO_TOKEN=${{ secrets.TOKEN_KIDDIN9 }}" ${GITHUB_WORKSPACE}/devices/common/diy.sh
        sed -i "1a TARGET=${{matrix.target}}" ${GITHUB_WORKSPACE}/devices/common/diy.sh
        if [ ${{matrix.target}} == "x86_64" ]; then
            echo "ARCH=linux/amd64" >> $GITHUB_ENV
            echo "MTARGET=x86_64" >> $GITHUB_ENV
        elif [ ${{matrix.target}} == "x86_generic" ]; then
            echo "ARCH=linux/amd32" >> $GITHUB_ENV
            echo "MTARGET=x86_generic" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} =~ (armsr_armv8|ipq807x_generic|mediatek_mt7622|mediatek_mt7981|mediatek_filogic|bcm27xx_bcm2710|qualcommax_ipq60xx|bcm4908_generic|sunxi_cortexa53) ]]; then
            echo "MTARGET=aarch64_cortex-a53" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} =~ (ramips_mt7621|ramips_mt7620|ramips_mt76x8) ]]; then
            echo "MTARGET=mipsel_24kc" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "ath79_nand" ]]; then
            echo "MTARGET=mips_24kc" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "ipq50xx_arm" ]]; then
            echo "MTARGET=arm_cortex-a7" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} =~ (ipq40xx_generic|bcm27xx_bcm2709|sunxi_cortexa7) ]]; then
            echo "MTARGET=arm_cortex-a7_neon-vfpv4" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "meson_meson8b" ]]; then
            echo "MTARGET=arm_cortex-a5_vfpv4" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "bcm53xx" ]]; then
            echo "MTARGET=arm_cortex-a9" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "mvebu_cortexa9" ]]; then
            echo "MTARGET=arm_cortex-a9_vfpv3-d16" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "ipq806x_generic" ]]; then
            echo "MTARGET=arm_cortex-a15_neon-vfpv4" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "bcm27xx_bcm2708" ]]; then
            echo "MTARGET=arm_arm1176jzf-s_vfp" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} == "kirkwood_generic" ]]; then
            echo "MTARGET=arm_xscale" >> $GITHUB_ENV
        else
          echo "ARCH=linux/arm64" >> $GITHUB_ENV
          if [[ ${{matrix.target}} == "bcm27xx_bcm2711" ]]; then
            echo "MTARGET=aarch64_cortex-a72" >> $GITHUB_ENV
          elif [[ ${{matrix.target}} == rockchip* ]]; then
            echo "MTARGET=aarch64_generic" >> $GITHUB_ENV
          fi
        fi

    - name: 软件包更新
      continue-on-error: true
      run: |
        status=$(curl -H "Authorization: token ${{ secrets.TOKEN_KIDDIN9 }}" -s "https://api.github.com/repos/kiddin9/openwrt-packages/actions/runs" | jq -r '.workflow_runs[0].status')
        if [[ "$status" == "completed" ]]; then
          curl -X POST https://api.github.com/repos/kiddin9/openwrt-packages/dispatches \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${{ secrets.TOKEN_KIDDIN9 }}" \
          --data '{"event_type": "update"}'
        fi

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev ack
        sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: 获取当前日期
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV

    - name: 克隆源代码
      run: |
        REPO_BRANCH="$((curl -gs -H 'Content-Type: application/json' \
           -H "Authorization: Bearer ${{ secrets.TOKEN_KIDDIN9 }}" \
           -X POST -d '{ "query": "query {repository(owner: \"openwrt\", name: \"openwrt\") {refs(refPrefix: \"refs/tags/\", last: 4, orderBy: {field: TAG_COMMIT_DATE, direction: ASC}) {edges {node {name}}}}}"}' https://api.github.com/graphql) | jq -r '.data.repository.refs.edges[].node.name' | grep v23 | tail -n 1)"
        echo "CONFIG_VERSION_REPO=\"https://dl.openwrt.ai/`echo $REPO_BRANCH  | cut -d . -f 1,2 | sed -e 's/^v//'`\"">>devices/common/.config
        if [[ ! "${{ env.REPO_BRANCH }}" && "$REPO_URL" == "https://github.com/openwrt/openwrt" ]]; then
            git clone $REPO_URL -b $REPO_BRANCH openwrt
        elif [[ ! "${{ env.REPO_BRANCH }}" ]]; then
            git clone $REPO_URL openwrt
        else
            git clone $REPO_URL -b ${{ env.REPO_BRANCH }} openwrt
            echo "git clone $REPO_URL -b ${{ env.REPO_BRANCH }} openwrt"
        fi
        echo "RELEASE_DATE=$(TZ=CST-8 date +"%Y.%m.%d-%H")" >> $GITHUB_ENV
    - name: 释放磁盘空间
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/bin openwrt/bin
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir

    - name: 加载自定义配置
      run: |
        cp -rf devices/common/. openwrt/
        cp -rf devices/${{matrix.target}}/. openwrt/
        cp -rf devices openwrt/
        cd openwrt
        cp -Rf ./diy/* ./ || true
        chmod +x devices/common/$DIY_SH
        /bin/bash "devices/common/$DIY_SH"
        cp -f devices/common/$CONFIG_FILE .config
        if [ -f "devices/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat devices/${{matrix.target}}/$CONFIG_FILE >> .config
        fi
        if [ -f "devices/${{matrix.target}}/$DIY_SH" ]; then
          chmod +x devices/${{matrix.target}}/$DIY_SH
          echo "/bin/bash devices/${{matrix.target}}/$DIY_SH"
          /bin/bash "devices/${{matrix.target}}/$DIY_SH"
        fi

    - name: 应用修补程序
      run: |
        cd openwrt
        find "devices/common/patches" -type f ! -name 'china_mirrors.patch' -name '*.patch' ! -name '*.revert.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -B --merge -p1 -E --forward"
        #git apply devices/common/patches/*.patch
        if [ -n "$(ls -A devices/${{matrix.target}}/patches 2>/dev/null)" ]; then
          if [ -n "$(ls -A devices/${{matrix.target}}/*.bin.patch 2>/dev/null)" ]; then
            git apply devices/${{matrix.target}}/patches/*.bin.patch
          fi
          find "devices/${{matrix.target}}/patches" -maxdepth 1 -type f -name '*.patch' ! -name '*.revert.patch' ! -name '*.bin.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -B --merge -p1 -E --forward"
          find "devices/${{matrix.target}}/patches" -maxdepth 1 -type f -name '*.revert.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -R -B --merge -p1 -E --forward"
        fi
        sed -i '$a  \
        CONFIG_CPU_FREQ_GOV_POWERSAVE=y \
        CONFIG_CPU_FREQ_GOV_USERSPACE=y \
        CONFIG_CPU_FREQ_GOV_ONDEMAND=y \
        CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y \
        CONFIG_CRYPTO_CHACHA20_NEON=y \
        CONFIG_CRYPTO_CHACHA20POLY1305=y \
        CONFIG_FAT_DEFAULT_IOCHARSET="utf8" \
        ' `find target/linux -path "target/linux/*/config-*"`

    - name: Defconfig
      run: |
        cd openwrt
        make defconfig
        if [[ ! "${{matrix.target}}" =~ (armsr_armv8|bcm27xx_*|rockchip_*|sunxi_*|x86_*|meson_meson8b) ]]; then
        sed -n '/# Wireless Drivers/,/# end of Wireless Drivers/p' .config | sed -e 's/=m/=n/' >>.config
        sed -i "s/\(kmod-qca.*\)=m/\1=n/" .config
        make defconfig
        fi
        cat .config

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make download -j$(($(nproc)+1)) &
        sleep 5

    - name: 缓存
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ matrix.target }}
        clean: ${{ contains(github.event.action, 'nocache') }}
        prefix: ${{ github.workspace }}/openwrt
    
    - name: 检查空间使用情况
      run: |
        shopt -s extglob
        cd openwrt
        if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
            rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
        fi
        df -hT
    - name: SSH连接到Actions操作
      uses: kiddin9/debugger-action@master
      if: contains(github.event.action, 'ssh')

    - name: 编译固件
      id: compile
      run: |
        shopt -s extglob
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make V=s &>build.log || (tail -50 build.log; curl -k --data chat_id="${{ env.TELEGRAM_CHAT_ID }}" --data "text=❌ OpenWrt ${{ env.VERSION }} ${{matrix.target}} 编译失败 😂" "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage";exit 1)
        sed -i "s/# CONFIG_IB is not set/CONFIG_IB=y/" .config
        rm -rf staging_dir/toolchain-*/bin/*openwrt-linux-musl-lto-dump
        rm -rf staging_dir/toolchain-*/initial
        echo "::set-output name=status::success"


    - name: 整理文件  
      id: organize  
      if: steps.compile.outputs.status == 'success'  
      run: |  
       mv openwrt/.config openwrt/bin/targets/*/*  
       cd openwrt/bin/targets/*/*  
       rm -rf packages  
       rm -rf *uImage  
       echo "FIRMWARE=$PWD" >> $GITHUB_ENV  
       echo "::set-output name=status::success"
       echo "DATE=$(TZ=CST-8 date "+%Y%m%d%H%M%S")" >> $GITHUB_ENV 
 # 上传固件
    - name: 上传固件
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.BUILD_USER }}-${{ env.DATE }}-OpenWrt-${{ env.BRANCH }}-Firmware
        path: ${{ env.FIRMWARE }}
  # 上传下载地址文件
    - name: 上传下载地址文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.DOWNLOAD_URL_FILE }}
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DOWNLOAD_URL_FILE }}
 # 生成标签  
    - name: 生成标签  
      id: tag  
      if: steps.compile.outputs.status == 'success'  
      run: |  
       echo "RELEASE_TAG=OpenWrt-${{ env.BRANCH }}-${{ env.RELEASE_DATE }}" >> $GITHUB_ENV  
       echo "success" >> tag.log
       echo "::set-output name=status::success"
       
    # 发行固件
    - name: 发行固件
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{secrets.TOKEN_KIDDIN9 }}
      with:
        name: Netgear ${{ env.BRANCH }} 🚀 | 自动编译 / ${{ env.RELEASE_TAG }}
        tag_name: ${{ env.RELEASE_TAG }}
        body: |            
            1、本固件为自动编译
            2、发行版中只提供完整的固件
            3、需要单独IPK请到分支下载
            4、源码：${{ env.REPO_URL }}
            -- Build by ${{ env.BUILD_USER }} @ with Github Action on ${{ env.RELEASE_TAG }}
            🚀 Auto build | 自动编译      
        files: ${{ env.FIRMWARE }}/*
# 微信通知
    - name: 微信通知
      if: steps.compile.outputs.status == 'success' && env.SEND_WECHAT_MSG == 'true'
      uses: emon100/Action-Serverchan@master
      with:
        sendkey: ${{ secrets.SCKEY }}
        text: ${{ env.BRANCH }}固件编译完成！
        desp: 固件名称:${{ env.BRANCH }} 固件地址:${{ env.GITHUB_RELEASE }}/tag/${{ env.RELEASE_TAG }}

    
